'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.State = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mobx = require('mobx');

var _Base2 = require('./Base');

var _Base3 = _interopRequireDefault(_Base2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var State = exports.State = {};
var assign = Object.assign;

/**
 * Class Model.
 * The model is the smallest piece of state, it should be used to represent a single object coming from the backend.
 * 
 * TODO: Implement LoadDispatch and reactive loading interface.
 * 
 * @extends Base
 * @example
 * class Influencer extends Model {
 *   
 *   // default values are implemented here
 *   username
 *   socialProfileId
 *   name
 *   
 *   set socialProfile(val) {
 *     this._socialProfile = val
 *   }
 *   
 *   // Social profile object is autoloaded here for us. This is optional.
 *   get socialProfile() {
 *     if (!this._socialProfile)
 *       this._socialProfile = SocialProfile.initializeAndLoad({id: this.socialProfileId});
 *     return this._socialProfile
 *   }
 *   
 *   // how retrieve should be implemented
 *   retrieve() {
 *     return api.get(`/social_profiles/${this.id}`, (res) => {
 *       const data = socialProfileSchema.parseRaw(res.socialProfile)
 *       Object.assign(this, data)
 *       return this
 *     })
 *   }
 * }
 */

var Model = function (_Base) {
  _inherits(Model, _Base);

  function Model() {
    _classCallCheck(this, Model);

    return _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).apply(this, arguments));
  }

  _createClass(Model, [{
    key: 'retrieve',


    /**
     * This method is called by load, it should update the model's own internal state and then return a promise.
     * @returns {Promise}
     */
    value: function retrieve() {
      return Promise.reject('Not Implemented');
    }

    /**
     * Save should be implemented to save this object and update itself
     * @returns {Promise}
     */

  }, {
    key: 'save',
    value: function save() {
      return Promise.reject('Not Implemented');
    }

    /**
     * Destroy should delete the object in the backend and in the state tree
     * @returns {Promise}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      return Promise.reject('Not Implemented');
    }

    /**
     * load will call retrieve and then setLoaded. Call force to ensure the model will reload.
     * @param force
     * @returns {Promise}
     */

  }, {
    key: 'load',
    value: function load(force) {
      var _this2 = this;

      if (this.loaded && !force) Promise.resolve(this);

      this.setLoading();
      return this.retrieve().then(function () {
        _this2.setLoaded();
        return _this2;
      });
    }
  }], [{
    key: 'initialize',


    /**
     * Initialize get's an instance of a model, ensuring to return the same instance if it already exists.
     * @param rawData
     * @returns {Model}
     */
    value: function initialize(rawData) {
      // Get the name. In Production, class names are uglified, so a className property is necessary (e.g. User.classname = "User")
      var name = this.className;
      if (!name) throw new Error("All classes must have a className property to avoid uglification errors. Source: " + this.name);
      // if this is a User model, it's instances will be a State.User[id]
      if (!State[name]) State[name] = {};
      // try and find the object
      var object = State[name][rawData.id];
      var data = this.processData(rawData);
      if (object && object.loading) {
        return object;
      } else if (object) {
        assign(object, data); // update the object if it exists already
      } else if (data.id) {
        object = (0, _mobx.extendObservable)(new this(data), data); // create a new one
        State[name][object.id] = object; // add it to the global state
      } else {
        object = (0, _mobx.extendObservable)(new this(data), data); // create an 'untracked' model, won't be save in State cuz no ID.
      }

      return object;
    }

    /**
     * Initialize's the model and then calls load.
     * @param data
     * @returns {Model}
     */

  }, {
    key: 'initializeAndLoad',
    value: function initializeAndLoad(data) {
      if (!data.id) throw new Error("initializeAndLoad must be called with an id");
      var object = this.initialize(data);
      object.load();
      return object;
    }

    /**
     * Process the data before initializing it.
     * @param raw
     * @returns {Object}
     */

  }, {
    key: 'processData',
    value: function processData(raw) {
      return raw;
    }
  }]);

  return Model;
}(_Base3.default);

exports.default = Model;