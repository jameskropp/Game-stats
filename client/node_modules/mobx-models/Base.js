'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mobx = require('mobx');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class, this class exposes basic loading and data fetching methods to all it's subclasses.
 */
var Base = function () {
  function Base() {
    _classCallCheck(this, Base);

    this._loaded = (0, _mobx.observable)(false);
    this._loading = (0, _mobx.observable)(false);
  }

  _createClass(Base, [{
    key: 'setLoaded',


    /**
     * Set loaded, same as loaded = true.
     */
    value: function setLoaded() {
      this._loaded.set(true);
      this._loading.set(false);
    }

    /**
     * Whether the object is currently loading, different from loaded.
     * @returns {Boolean}
     */

  }, {
    key: 'setLoading',


    /**
     * Set loading to true, does not affect loaded.
     */
    value: function setLoading() {
      this._loading.set(true);
    }
  }, {
    key: 'load',
    value: function load() {}

    /**
     * Get this objects internal data. Will only return keys that do not start with `_`.
     * @returns {Object}
     */

  }, {
    key: 'toJS',


    /**
     * Call MobX to JS on the object.
     * @returns {Object}
     */
    value: function toJS() {
      return (0, _mobx.toJS)(this);
    }
  }, {
    key: 'loaded',


    /**
     * Is the class loaded?
     * @returns {Boolean}
     */
    get: function get() {
      return this._loaded.get();
    }

    /**
     * Set loaded. Will also set the loading flag to false if not loaded.
     * @param {Boolean} val
     */
    ,
    set: function set(val) {
      this._loaded.set(!!val);
      if (this.loaded) this._loading.set(false);
    }
  }, {
    key: 'loading',
    get: function get() {
      return this._loading.get();
    }

    /**
     * Set loading, does not affect loaded.
     * @param {Boolean} val
     */
    ,
    set: function set(val) {
      this._loading.set(!!val);
    }
  }, {
    key: 'data',
    get: function get() {
      var data = this.toJS();
      Object.keys(data).forEach(function (key) {
        if (key[0] === '_') {
          delete data[key];
        }
      });
      return data;
    }
  }]);

  return Base;
}();

exports.default = Base;