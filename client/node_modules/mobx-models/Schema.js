"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.parse = parse;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class Schema provides the functionality to parse javascript objects into Model instances.
 * 
 * @example
 * const authorSchema = new Schema(Author)
 * const blogSchema = new Schema(Blog, {
 *   author: authorSchema,
 * })
 *
 * const data = {
 *   id: 1,
 *     title: 'test',
 *     content: 'blog',
 *     author: {
 *     id: 1,
 *       name: 'author',
 *   }
 * }
 *
 * const res = parse(data, blogSchema)
 */
var Schema = function () {

  /**
   * 
   * @param {Model} model
   * @param {Object} schema
   */
  function Schema(model, schema) {
    _classCallCheck(this, Schema);

    this.schemaClass = true;
    this.schemaArray = false;

    this.model = model;
    this.schema = schema || {};
  }

  /**
   * Define the schema 
   * @param schema
   */


  _createClass(Schema, [{
    key: "define",
    value: function define(schema) {
      this.schema = schema || {};
    }

    /**
     * Parses a model and initializes it.
     * @param data
     * @returns {*}
     */

  }, {
    key: "parse",
    value: function parse(data) {
      var _this = this;

      if (data && data.constructor === Array) {
        return data.map(function (item) {
          return _this.parse(item);
        });
      } else {
        return this.model.initialize(this._parse(data));
      }
    }

    /**
     * Parses the data given without initializing it in a model.
     * @param data
     * @returns {*}
     */

  }, {
    key: "parseRaw",
    value: function parseRaw(data) {
      var _this2 = this;

      if (data.constructor === Array) {
        return data.map(function (item) {
          return _this2.parseRaw(item);
        });
      } else {
        return this._parse(data);
      }
    }
  }, {
    key: "_parse",
    value: function _parse(data) {
      var _this3 = this;

      Object.keys(this.schema).forEach(function (key) {
        if (_this3.schema[key].schemaClass) {
          if (data[key]) {
            data[key] = _this3.schema[key].parse(data[key]);
          } else {
            data[key] = _this3.schema[key].parse({});
          }
        } else {
          data[key] = _this3.schema[key]; // set a raw element
        }
      });
      return data;
    }
  }]);

  return Schema;
}();

/**
 * Parse a dataset into a schema.
 * @param data
 * @param schema
 * @returns {*}
 */


exports.default = Schema;
function parse(data, schema) {
  if (schema.schemaClass) {
    if (data.constructor === Array) {
      return data.map(function (item) {
        return schema.parse(item);
      });
    } else {
      return schema.parse(data);
    }
  } else {
    var key = Object.keys(schema)[0];
    if (data[key] && schema[key]) {
      return parse(data[key], schema[key]);
    } else {
      return data;
    }
  }
}