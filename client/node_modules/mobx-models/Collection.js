'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mobx = require('mobx');

var _Base2 = require('./Base');

var _Base3 = _interopRequireDefault(_Base2);

var _LoadDispatch = require('./LoadDispatch');

var _LoadDispatch2 = _interopRequireDefault(_LoadDispatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Collection is an observable array of values that is aware of it's loaded state. Collection implements all array
 * methods.
 *
 * @extends Base
 * @implements Array
 *
 * @example
 * const users = new Collection(() => api.loadUsers())
 * users.map(users => user)
 */
var Collection = function (_Base) {
  _inherits(Collection, _Base);

  /**
   * Provide a loader function that returns a promise that resolve with the data that should exist in the collection.
   * @param {Function<Promise>} loader
   */
  function Collection(loader) {
    _classCallCheck(this, Collection);

    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this));

    _this._results = (0, _mobx.observable)([]);


    _this.loader = loader;

    if (typeof _this.loader !== 'function') {
      throw new Error('Loader is not a function ' + _this.loader);
    }
    return _this;
  }

  _createClass(Collection, [{
    key: 'empty',
    value: function empty() {
      this._results = (0, _mobx.observable)([]);
    }
  }, {
    key: 'map',
    value: function map(fn) {
      return this.results.map(fn);
    }
  }, {
    key: 'forEach',
    value: function forEach(fn) {
      return this.results.forEach(fn);
    }
  }, {
    key: 'indexOf',
    value: function indexOf(item) {
      return this.results.indexOf(item);
    }
  }, {
    key: 'reverse',
    value: function reverse() {
      return this.results.reverse();
    }
  }, {
    key: 'reduce',
    value: function reduce(fn) {
      return this.results.reduce(fn);
    }
  }, {
    key: 'reduceRight',
    value: function reduceRight() {
      return this.results.reduceRight();
    }
  }, {
    key: 'replace',
    value: function replace(arr) {
      return this._results.replace(arr);
    }
  }, {
    key: 'filter',
    value: function filter(fn) {
      return this.results.filter(fn);
    }
  }, {
    key: 'find',
    value: function find(fn) {
      return this.results.find(fn);
    }
  }, {
    key: 'findIndex',
    value: function findIndex(fn) {
      return this.results.findIndex(fn);
    }
  }, {
    key: 'sort',
    value: function sort(fn) {
      return this.results.sort(fn);
    }
  }, {
    key: 'splice',
    value: function splice(index, howmany, addItem) {
      return this.results.splice(index, howmany, addItem);
    }
  }, {
    key: 'push',
    value: function push(obj) {
      return this.results.push(obj);
    }
  }, {
    key: 'load',
    value: function load(force) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        // ensure we don't double load
        if (_this2.loading) {
          return resolve(_this2._results);
        }

        if (_this2.loaded && !force) {
          return resolve(_this2._results);
        }

        _this2.setLoading();
        _this2.loader().then(function (results) {
          _this2._results.replace(results);

          _this2.setLoaded();
          resolve(_this2._results);
        });
      });
    }
  }, {
    key: 'loaded',
    get: function get() {
      _LoadDispatch2.default.registerLoader(this.load.bind(this));
      return this._loaded.get();
    }
  }, {
    key: 'loading',
    get: function get() {
      _LoadDispatch2.default.registerLoader(this.load.bind(this));
      return this._loading.get();
    }
  }, {
    key: 'results',
    get: function get() {
      _LoadDispatch2.default.registerLoader(this.load.bind(this));
      return this._results;
    }
  }, {
    key: 'length',
    get: function get() {
      return this.results.length;
    }
  }, {
    key: 'first',
    get: function get() {
      return this.results[0];
    }
  }]);

  return Collection;
}(_Base3.default);

exports.default = Collection;