'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asReactiveLoader = undefined;

var _react = require('react');

var _LoadDispatch = require('./LoadDispatch');

var _LoadDispatch2 = _interopRequireDefault(_LoadDispatch);

var _mobxReact = require('mobx-react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Turn a component into an observer that reactively loads all dependencies.
 *
 * ### Reactive loading:
 * 
 * Reactive loading works by tracking which pieces of state were accessed during the rendering of a component. When a
 * piece of state is accessed, it should register itself with the LoadDispatch. The componentDidMount method is then
 * overridden to call all of the loader functions registered with the LoadDispatch during rendering. For an example of
 * how this works, view the docs for LoadDispatch.
 *
 * @param component
 * @returns {Component}
 */
var asReactiveLoader = exports.asReactiveLoader = function asReactiveLoader(component) {
  var observerComp = (0, _mobxReact.observer)(component);
  var base = observerComp.prototype.render;
  var oldDidUpdate = observerComp.prototype.componentDidUpdate;
  var oldDidMount = observerComp.prototype.componentDidMount;
  var name = component.name || component.displayName || getComponentName(component);

  if (!base) throw new Error("Render must exist on component");

  function newRender() {
    if (!this._loaderID) {
      this._loaderID = name + Math.random().toFixed(5);
    }
    _LoadDispatch2.default.beginListening(this._loaderID);

    // pass the render along to the original render.
    var result = base.apply(this, arguments);

    // need async to keep load requests outside of the mobx-react render.
    _LoadDispatch2.default.endListening();
    return result;
  }

  function newDidUpdate() {
    if (oldDidUpdate) {
      oldDidUpdate.apply(this, arguments);
    }
    _LoadDispatch2.default.callLoaders(this._loaderID);
  }

  function newDidMount() {
    if (oldDidMount) {
      oldDidMount.apply(this, arguments);
    }
    _LoadDispatch2.default.callLoaders(this._loaderID);
  }

  Object.defineProperty(observerComp.prototype, 'componentDidUpdate', {
    writable: false, configurable: true, enumerable: false,
    value: newDidUpdate
  });

  Object.defineProperty(observerComp.prototype, 'componentDidMount', {
    writable: false, configurable: true, enumerable: false,
    value: newDidMount
  });

  observerComp.prototype.render = newRender;

  return observerComp;
};

var getComponentName = function getComponentName(component) {
  var result = /^function\s+([\w\$]+)\s*\(/.exec(component.toString());
  return result ? result[1] : 'Component'; // for an anonymous function there won't be a match
};